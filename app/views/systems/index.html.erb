<div class="layout_2_block">
	
</div>

	<div class="col-lg-3">
		<div class="ibox float-e-margins">
		    <div class="ibox-title light-blue-top">
		        <h5>System Summary
		        </h5>
		    </div>
		   
		    <div class="ibox-content">
		    		<div class="layout_2_block"></div>
		    		<div class="row">
		    				<div class="col-lg-9 col-lg-offset-1">
		    				  <div class="flot-chart">
                        <div class="flot-chart-pie-content" id="flot-pie-chart"></div>
                    </div>
		    				</div>
		    		</div>
		    		<div class="layout_2_block"></div>
		    		<div class="row">
		    				<div class="col-lg-9 col-lg-offset-1">
		    				  <div class="flot-chart">
                        <div class="flot-chart-pie-content" id="flot-pie-chart_two"></div>
                    </div>
		    				</div>
		    		</div>
		    		<div class="layout_2_block"></div>
		    		<div class="row">
		    				<div class="col-lg-9 col-lg-offset-1">
		    				  <div class="flot-chart">
                        <div class="flot-chart-pie-content" id="flot-pie-chart_three"></div>
                    </div>
		    				</div>
		    		</div>
		    		<div class="layout_2_block"></div>
		    </div>

		</div>
  </div>

	<div class="col-lg-3">
		<div class="ibox float-e-margins">
		    <div class="ibox-title primary-top">
		        <h5> Node Details
		        </h5>
		    </div>
		    <div class="ibox-content">
		    		    <h7>CPU Current Workflow</h7>
		    				<div class="flot-chart">
		    				    <div class="flot-chart-content" id="flot-line-chart-moving"></div>
		    				</div>
		    </div>
		    <div class="ibox-content">
		    		    <h7>RAM Current Workflow</h7>
		    				<div class="flot-chart">
		    				    <div class="flot-chart-content" id="flot-line-chart-moving_two"></div>
		    				</div>
		    </div>
		    <div class="ibox-content">
		    		    <h7>IOPS current read/write</h7>
		    				<div class="flot-chart">
		    				    <div class="flot-chart-content" id="iops-line-chart"></div>
		    				</div>
		    </div>
		    <div class="ibox-content">
		    		    <h7>Bandwidth current read/write</h7>
		    				<div class="flot-chart">
		    				    <div class="flot-chart-content" id="bandwidth-line-chart"></div>
		    				</div>
		    </div>
		</div>
	</div>
	<div class="col-lg-3">

				<div class="ibox float-e-margins">
				    <div class="ibox-title yellow-top">
				        <h5>Volumes List
				        </h5>
				    </div>
				    <div class="ibox-content">
				       	<div class="row">
				       		<div class="col-lg-3">
				       			<a href="#"> <%= image_tag("hosting.png", alt:"Volume1") %> </a>
				       		</div>
				       		<div class="col-lg-3 col-lg-offset-1">
				       			<a href="#"> <%= image_tag("hosting.png", alt:"Volume2") %> </a>
				       		</div>
				       		<div class="col-lg-3 col-lg-offset-1">
				       			<a href="#"> <%= image_tag("hosting.png", alt:"Volume3") %> </a>
				       		</div>
				       	</div>
				    </div>
				</div>
	<div class="row">
		<div class="col-lg-12">
	        <div class="ibox float-e-margins">
	            <div class="ibox-title">
	                <h5>Striped Table </h5>
	                <div class="ibox-tools">
	                    <a class="collapse-link">
	                        <i class="fa fa-chevron-up"></i>
	                    </a>
	                    <a class="dropdown-toggle" data-toggle="dropdown" href="#">
	                        <i class="fa fa-wrench"></i>
	                    </a>
	                    <ul class="dropdown-menu dropdown-user">
	                        <li>
	                            <a href="#">Config option 1</a>
	                        </li>
	                        <li>
	                            <a href="#">Config option 2</a>
	                        </li>
	                    </ul>
	                    <a class="close-link">
	                        <i class="fa fa-times"></i>
	                    </a>
	                </div>
	            </div>
	            <div class="ibox-content">

	                <table class="table table-striped">
	                    <tbody>
	                    <tr>
	                        <td>Volume Name</td>
	                        <td class="text-navy"> test </td>
	                    </tr>
	                    <tr>
	                        <td>Volume Size</td>
	                        <td class="text-warning"> 495GB </td>
	                    </tr>
	                    <tr>
	                        <td>Volume Type</td>
	                        <td class="text-navy"> JBOD </td>
	                    </tr>
	                    <tr>
	                        <td>Scheduler</td>
	                        <td class="text-navy"> File Placement Optimizer </td>
	                    </tr>
	                    <tr>
	                        <td>Compression Data</td>
	                        <td class="text-navy"> OFF </td>
	                    </tr>
	                    <tr>
	                        <td>Data Deduplication</td>
	                        <td class="text-navy"> OFF </td>
	                    </tr>
	                    </tbody>
	                </table>
	            </div>
	        </div>
	      </div>
		</div>
	</div>
	<div class="col-lg-3">
		<div class="ibox float-e-margins">
		    <div class="ibox-title success-top">
		        <h5>Nodes List
		        </h5>
		    </div>
		    <div class="ibox-content">
		       	<div class="row">
		       		<div class="col-lg-3">
		       			<a href="#"> <%= image_tag("cloud_node.png", size:"64x64", alt:"Node1") %> </a>
		       		</div>
		       		<div class="col-lg-3 col-lg-offset-1">
		       			<a href="#"> <%= image_tag("cloud_node.png", size:"64x64", alt:"Node2") %> </a>
		       		</div>
		       		<div class="col-lg-3 col-lg-offset-1">
		       			<a href="#"> <%= image_tag("cloud_node.png", size:"64x64", alt:"Node3") %> </a>
		       		</div>
		       	</div>
		    </div>
		</div>
		<div class="ibox float-e-margins">
		    <div class="ibox-title">
		        <h5>Nodes Information
		        </h5>
		    </div>
		    <div class="ibox-content float-e-margins">
		    		<div class="ibox-title">
		    		    <h5>Node One
		    		    </h5>
		    		</div>
            <div id="ct-chart3" class="ct-perfect-fourth"></div>
		    </div>
		</div>
		  <div class="ibox-title">
			    <h5>Node Health
			    </h5>
			</div>
			<div class="ibox-content float-e-margins">
				<table class="table">
				    <tbody>
				    <tr>
				        <td>Node Status</td>
				        <td></td>
				        <td style="color:#1ab394"><i class="fa fa-check"></td>
				    </tr>
				    <tr>
				        <td>Volume Status</td>
				        <td></td>
				        <td style="color:#1ab394"><i class="fa fa-check"></td>
				    </tr>
				    <tr>
				        <td>Node FS Status</td>
				        <td></td>
				        <td style="color:#1ab394"><i class="fa fa-check"></td>
				    </tr>
				    <tr>
				        <td>Fabric Status</td>
				        <td></td>
				        <td style="color:#1ab394"><i class="fa fa-check"></td>
				    </tr>
				    </tbody>
				</table>
			</div>
	</div>


<%= javascript_include_tag 'graphs' %>

<% content_for :javascript do %>

<script type="text/javascript">


$(function() {

  setTimeout(function() {
      toastr.options = {
          closeButton: true,
          progressBar: true,
          showMethod: 'slideDown',
          timeOut: 4000
      };
      toastr.success('Welcome to FORTISSIMO ', 'Dear David');

  }, 1300);

	var container = $("#flot-line-chart-moving");

	// Determine how many data points to keep based on the placeholder's initial size;
	// this gives us a nice high-res plot while avoiding more than one point per pixel.

	var maximum = container.outerWidth() / 2 || 300;

	//

	var data = [];

	function getRandomData() {

	    if (data.length) {
	        data = data.slice(1);
	    }

	    while (data.length < maximum) {
	        var previous = data.length ? data[data.length - 1] : 50;
	        var y = previous + Math.random() * 10 - 5;
	        data.push(y < 0 ? 0 : y > 100 ? 100 : y);
	    }

	    // zip the generated y values with the x values

	    var res = [];
	    for (var i = 0; i < data.length; ++i) {
	        res.push([i, data[i]])
	    }

	    return res;
	}

	series = [{
	    data: getRandomData(),
	    lines: {
	        fill: true
	    }
	}];


	var plot = $.plot(container, series, {
	    grid: {

	        color: "#999999",
	        tickColor: "#D4D4D4",
	        borderWidth: 0,
	        minBorderMargin: 20,
	        labelMargin: 10,
	        backgroundColor: {
	            colors: ["#ffffff", "#ffffff"]
	        },
	        margin: {
	            top: 8,
	            bottom: 20,
	            left: 20
	        },
	        markings: function (axes) {
	            var markings = [];
	            var xaxis = axes.xaxis;
	            for (var x = Math.floor(xaxis.min) ; x < xaxis.max; x += xaxis.tickSize * 2) {
	                markings.push({
	                    xaxis: {
	                        from: x,
	                        to: x + xaxis.tickSize
	                    },
	                    color: "#fff"
	                });
	            }
	            return markings;
	        }
	    },
	    colors: ["#1ab394"],
	    xaxis: {
	        tickFormatter: function () {
	            return "";
	        }
	    },
	    yaxis: {
	        min: 0,
	        max: 110
	    },
	    legend: {
	        show: true
	    }
	});

	setInterval(function updateRandom() {
	    series[0].data = getRandomData();
	    plot.setData(series);
	    plot.draw();
	}, 40);

	new Chartist.Bar('#ct-chart3', {
	    labels: ['CPU', 'RAM', 'Capacity'],
	    series: [
	        [27.5, 16, 140],
	        [0,0,0],
	        [100, 100, 500]
	    ]
	}, {
	    stackBars: true,
	    axisY: {
	        labelInterpolationFnc: function(value) {
	            return value;
	        }
	    }
	}).on('draw', function(data) {
	            if(data.type === 'bar') {
	                data.element.attr({
	                    style: 'stroke-width: 30px'
	                });
	            }
	        });

});

$(function() {
	var container = $("#flot-line-chart-moving_two");

	// Determine how many data points to keep based on the placeholder's initial size;
	// this gives us a nice high-res plot while avoiding more than one point per pixel.

	var maximum = container.outerWidth() / 2 || 300;

	//

	var data = [];

	function getRandomData() {

	    if (data.length) {
	        data = data.slice(1);
	    }

	    while (data.length < maximum) {
	        var previous = data.length ? data[data.length - 1] : 50;
	        var y = previous + Math.random() * 10 - 5;
	        data.push(y < 0 ? 0 : y > 100 ? 100 : y);
	    }

	    // zip the generated y values with the x values

	    var res = [];
	    for (var i = 0; i < data.length; ++i) {
	        res.push([i, data[i]])
	    }

	    return res;
	}

	series = [{
	    data: getRandomData(),
	    lines: {
	        fill: true
	    }
	}];


	var plot = $.plot(container, series, {
	    grid: {

	        color: "#999999",
	        tickColor: "#D4D4D4",
	        borderWidth: 0,
	        minBorderMargin: 20,
	        labelMargin: 10,
	        backgroundColor: {
	            colors: ["#ffffff", "#ffffff"]
	        },
	        margin: {
	            top: 8,
	            bottom: 20,
	            left: 20
	        },
	        markings: function (axes) {
	            var markings = [];
	            var xaxis = axes.xaxis;
	            for (var x = Math.floor(xaxis.min) ; x < xaxis.max; x += xaxis.tickSize * 2) {
	                markings.push({
	                    xaxis: {
	                        from: x,
	                        to: x + xaxis.tickSize
	                    },
	                    color: "#fff"
	                });
	            }
	            return markings;
	        }
	    },
	    colors: ["#1ab394"],
	    xaxis: {
	        tickFormatter: function () {
	            return "";
	        }
	    },
	    yaxis: {
	        min: 0,
	        max: 110
	    },
	    legend: {
	        show: true
	    }
	});

	setInterval(function updateRandom() {
	    series[0].data = getRandomData();
	    plot.setData(series);
	    plot.draw();
	}, 40);

});

$(function() {

    var container = $("#iops-line-chart");

    // Determine how many data points to keep based on the placeholder's initial size;
    // this gives us a nice high-res plot while avoiding more than one point per pixel.

    var maximum = container.outerWidth() / 2 || 300;

    //

    var data = [];

    function getRandomData() {

        if (data.length) {
            data = data.slice(1);
        }

        while (data.length < maximum) {
            var previous = data.length ? data[data.length - 1] : 50;
            var y = previous + Math.random() * 10 - 5;
            data.push(y < 0 ? 0 : y > 100 ? 100 : y);
        }

        // zip the generated y values with the x values

        var res = [];
        for (var i = 0; i < data.length; ++i) {
            res.push([i, data[i]])
        }

        return res;
    }

    var dataTwo = [];

    function getRandomDataTwo() {

        if (dataTwo.length) {
            dataTwo = dataTwo.slice(1);
        }

        while (dataTwo.length < maximum) {
            var previous = dataTwo.length ? dataTwo[dataTwo.length - 1] : 50;
            var y = previous + Math.random() * 10 - 5;
            dataTwo.push(y < 0 ? 0 : y > 100 ? 100 : y);
        }

        // zip the generated y values with the x values

        var res = [];
        for (var i = 0; i < dataTwo.length; ++i) {
            res.push([i, dataTwo[i]])
        }

        return res;
    }

    //

    var series = [{
        data: getRandomData(),
        lines: {
            fill: true
        },
        color: '#68BE68'
    },
    	{
        data: getRandomDataTwo(),
        lines: {
            fill: true
        },
        color: '#539853'
    },

    ];
    //

    var plot = $.plot(container, series, {
        grid: {
            borderWidth: 1,
            minBorderMargin: 20,
            labelMargin: 10,
            backgroundColor: {
                colors: ["#fff", "#e4f4f4"]
            },
            margin: {
                top: 8,
                bottom: 20,
                left: 20
            },
            markings: function(axes) {
                var markings = [];
                var xaxis = axes.xaxis;
                for (var x = Math.floor(xaxis.min); x < xaxis.max; x += xaxis.tickSize * 2) {
                    markings.push({
                        xaxis: {
                            from: x,
                            to: x + xaxis.tickSize
                        },
                        color: "rgba(232, 232, 255, 0.2)"
                    });
                }
                return markings;
            }
        },
        xaxis: {
            tickFormatter: function() {
                return "";
            }
        },
        yaxis: {
            min: 0,
            max: 100
        },
        legend: {
            show: true
        }
    });

    // Update the random dataset at 25FPS for a smoothly-animating chart

    setInterval(function updateRandom() {
        series[0].data = getRandomData();
        series[1].data = getRandomDataTwo();
        plot.setData(series);
        plot.draw();
    }, 40);

});

$(function() {

    var container = $("#bandwidth-line-chart");

    // Determine how many data points to keep based on the placeholder's initial size;
    // this gives us a nice high-res plot while avoiding more than one point per pixel.

    var maximum = container.outerWidth() / 2 || 300;

    //

    var data = [];

    function getRandomData() {

        if (data.length) {
            data = data.slice(1);
        }

        while (data.length < maximum) {
            var previous = data.length ? data[data.length - 1] : 50;
            var y = previous + Math.random() * 10 - 5;
            data.push(y < 0 ? 0 : y > 100 ? 100 : y);
        }

        // zip the generated y values with the x values

        var res = [];
        for (var i = 0; i < data.length; ++i) {
            res.push([i, data[i]])
        }

        return res;
    }

    var dataTwo = [];

    function getRandomDataTwo() {

        if (dataTwo.length) {
            dataTwo = dataTwo.slice(1);
        }

        while (dataTwo.length < maximum) {
            var previous = dataTwo.length ? dataTwo[dataTwo.length - 1] : 50;
            var y = previous + Math.random() * 10 - 5;
            dataTwo.push(y < 0 ? 0 : y > 100 ? 100 : y);
        }

        // zip the generated y values with the x values

        var res = [];
        for (var i = 0; i < dataTwo.length; ++i) {
            res.push([i, dataTwo[i]])
        }

        return res;
    }

    //

    var series = [{
        data: getRandomData(),
        lines: {
            fill: true
        },
        color: '#68BE68'
    },
    	{
        data: getRandomDataTwo(),
        lines: {
            fill: true
        },
        color: '#539853'
    },

    ];
    //

    var plot = $.plot(container, series, {
        grid: {
            borderWidth: 1,
            minBorderMargin: 20,
            labelMargin: 10,
            backgroundColor: {
                colors: ["#fff", "#e4f4f4"]
            },
            margin: {
                top: 8,
                bottom: 20,
                left: 20
            },
            markings: function(axes) {
                var markings = [];
                var xaxis = axes.xaxis;
                for (var x = Math.floor(xaxis.min); x < xaxis.max; x += xaxis.tickSize * 2) {
                    markings.push({
                        xaxis: {
                            from: x,
                            to: x + xaxis.tickSize
                        },
                        color: "rgba(232, 232, 255, 0.2)"
                    });
                }
                return markings;
            }
        },
        xaxis: {
            tickFormatter: function() {
                return "";
            }
        },
        yaxis: {
            min: 0,
            max: 100
        },
        legend: {
            show: true
        }
    });

    // Update the random dataset at 25FPS for a smoothly-animating chart

    setInterval(function updateRandom() {
        series[0].data = getRandomData();
        series[1].data = getRandomDataTwo();
        plot.setData(series);
        plot.draw();
    }, 40);

});

$(function(){
	var data = [{
	    label: "In Use CPU",
	    data: 21,
	    color: "#5bc0de",
	}, {
	    label: "Total CPU",
	    data: 100,
	    color: "#337ab7",
	}];

	var plotObj = $.plot($("#flot-pie-chart"), data, {
	    series: {
	        pie: {
	            show: true
	        }
	    },
	    grid: {
	        hoverable: true
	    },
	    tooltip: true,
	    tooltipOpts: {
	        content: "%p.0%, %s", // show percentages, rounding to 2 decimal places
	        shifts: {
	            x: 20,
	            y: 0
	        },
	        defaultTheme: false
	    }
	});
});

$(function(){
	var data = [{
	    label: "In Use RAM",
	    data: 10,
	    color: "#5bc0de",
	}, {
	    label: "Total RAM",
	    data: 100,
	    color: "#337ab7",
	}];

	var plotObj = $.plot($("#flot-pie-chart_two"), data, {
	    series: {
	        pie: {
	            show: true
	        }
	    },
	    grid: {
	        hoverable: true
	    },
	    tooltip: true,
	    tooltipOpts: {
	        content: "%p.0%, %s", // show percentages, rounding to 2 decimal places
	        shifts: {
	            x: 20,
	            y: 0
	        },
	        defaultTheme: false
	    }
	});
});

$(function(){
	var data = [{
	    label: "In Use Capacity",
	    data: 150,
	    color: "#5bc0de",
	}, {
	    label: "Total Capacity",
	    data: 495,
	    color: "#337ab7",
	}];

	var plotObj = $.plot($("#flot-pie-chart_three"), data, {
	    series: {
	        pie: {
	            show: true
	        }
	    },
	    grid: {
	        hoverable: true
	    },
	    tooltip: true,
	    tooltipOpts: {
	        content: "%p.0%, %s", // show percentages, rounding to 2 decimal places
	        shifts: {
	            x: 20,
	            y: 0
	        },
	        defaultTheme: false
	    }
	});
});

</script>

<% end %>		